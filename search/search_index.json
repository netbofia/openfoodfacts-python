{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Food Facts Python SDK What is Open Food Facts? A food products database Open Food Facts is a database of food products with ingredients, allergens, nutrition facts and all the tidbits of information we can find on product labels. Made by everyone Open Food Facts is a non-profit association of volunteers. 25000+ contributors like you have added 2.5 million+ products from 150 countries using our Android, iPhone or Windows Phone app or their camera to scan barcodes and upload pictures of products and their labels. For everyone Data about food is of public interest and has to be open. The complete database is published as open data and can be reused by anyone and for any use. Check-out the cool reuses or make your own! The Open Food Facts Website: https://world.openfoodfacts.org Status Contributing Any help is welcome, as long as you don't break the continuous integration. Fork the repository and open a Pull Request directly on the \"develop\" branch. A maintainer will review and integrate your changes. Maintainers: Anubhav Bhargava Frank Rousseau Pierre Slamich Contributors: Agamit Sudo Daniel Stolpe Enioluwa Segun Nicolas Leger Pablo Hinojosa Andrea Stagi Beno\u00eet Prieur Aadarsh A Copyright and License Copyright 2016-2022 Open Food Facts The Open Food Facts Python SDK is licensed under the MIT License . Installation pip install openfoodfacts or: git clone https://github.com/openfoodfacts/openfoodfacts-python cd openfoodfacts-python sudo python setup.py install Examples Query a facet brands = openfoodfacts.facets.get_brands() Basic search search_result = openfoodfacts.products.search(query) Add a new product status_code = openfoodfacts.products.add_new_product({ 'code': barcode, 'user_id' : myUsername, 'password' : myPassword, 'product_name' : myProduct, 'stores' : store, 'brands': brand, 'packaging': packaging }) To see all possible capabilities, check out the usage guide . Third party applications If you use this SDK, feel free to open a PR to add your application in this list.","title":"Home"},{"location":"#open-food-facts-python-sdk","text":"","title":"Open Food Facts Python SDK"},{"location":"#what-is-open-food-facts","text":"","title":"What is Open Food Facts?"},{"location":"#a-food-products-database","text":"Open Food Facts is a database of food products with ingredients, allergens, nutrition facts and all the tidbits of information we can find on product labels.","title":"A food products database"},{"location":"#made-by-everyone","text":"Open Food Facts is a non-profit association of volunteers. 25000+ contributors like you have added 2.5 million+ products from 150 countries using our Android, iPhone or Windows Phone app or their camera to scan barcodes and upload pictures of products and their labels.","title":"Made by everyone"},{"location":"#for-everyone","text":"Data about food is of public interest and has to be open. The complete database is published as open data and can be reused by anyone and for any use. Check-out the cool reuses or make your own! The Open Food Facts Website: https://world.openfoodfacts.org","title":"For everyone"},{"location":"#status","text":"","title":"Status"},{"location":"#contributing","text":"Any help is welcome, as long as you don't break the continuous integration. Fork the repository and open a Pull Request directly on the \"develop\" branch. A maintainer will review and integrate your changes. Maintainers: Anubhav Bhargava Frank Rousseau Pierre Slamich Contributors: Agamit Sudo Daniel Stolpe Enioluwa Segun Nicolas Leger Pablo Hinojosa Andrea Stagi Beno\u00eet Prieur Aadarsh A","title":"Contributing"},{"location":"#copyright-and-license","text":"Copyright 2016-2022 Open Food Facts The Open Food Facts Python SDK is licensed under the MIT License .","title":"Copyright and License"},{"location":"#installation","text":"pip install openfoodfacts or: git clone https://github.com/openfoodfacts/openfoodfacts-python cd openfoodfacts-python sudo python setup.py install","title":"Installation"},{"location":"#examples","text":"Query a facet brands = openfoodfacts.facets.get_brands() Basic search search_result = openfoodfacts.products.search(query) Add a new product status_code = openfoodfacts.products.add_new_product({ 'code': barcode, 'user_id' : myUsername, 'password' : myPassword, 'product_name' : myProduct, 'stores' : store, 'brands': brand, 'packaging': packaging }) To see all possible capabilities, check out the usage guide .","title":"Examples"},{"location":"#third-party-applications","text":"If you use this SDK, feel free to open a PR to add your application in this list.","title":"Third party applications"},{"location":"Usage/","text":"Usage Guide This guide provides information on the methods available within the Open Food Facts Python SDK. All the I/O is JSON . Open Food Facts Login Facets Products by Facet Product Search Open Beauty Facts Open Pet Food Facts Open Food Facts Login Login into Openfoodfacts login_session_object = openfoodfacts.utils.login_into_OFF() Facets Get all available additives. additives = openfoodfacts.facets.get_additives() Get all available allergens. allergens = openfoodfacts.facets.get_allergens() Get all available brands. brands = openfoodfacts.facets.get_brands() Get all available categories. categories = openfoodfacts.facets.get_categories() Get all available countries. countries = openfoodfacts.facets.get_countries() Get all available entry dates. entry_dates = openfoodfacts.facets.get_entry_dates() Get all available ingredients. ingredients = openfoodfacts.facets.get_ingredients() Get all available languages. languages = openfoodfacts.facets.get_languages() Get all available packagings. packagings = openfoodfacts.facets.get_packaging() Get all available packaging codes. codes = openfoodfacts.facets.get_packaging_codes() Get all available purchase places. places = openfoodfacts.facets.get_purchase_places() Get all available stores. stores = openfoodfacts.facets.get_stores() Get all available trace types. traces = openfoodfacts.facets.get_traces() Get all available states. states = openfoodfacts.facets.get_states() Filter with parameters You can also use parameters parameter to filter results emb_packaging_codes = openfoodfacts.facets.get_packaging_codes( parameters={'filter': 'emb'} ) Products by Facet Get all products for given facets. Page access (pagination) is available through parameters. products = openfoodfacts.products.get_by_facets({ 'trace': 'egg', 'country': 'france' }) To get all products for given facets without pagination (returns a generator): for product in openfoodfacts.products.get_by_facets({ 'trace': 'egg', 'country': 'france' }): print (product['product_name']) Get all products for given additive. products = openfoodfacts.products.get_by_additive(additive, page=1) To get all products for given additive without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_additive(additive): print (product['product_name']) Get all products for given allergen. products = openfoodfacts.products.get_by_allergen(allergen) To get all products for given allergen without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_allergen(allergen): print (product['product_name']) Get all products for given brand. products = openfoodfacts.products.get_by_brand(brand) To get all products for given brand without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_brand(brand): print (product['product_name']) Get all products for given category. products = openfoodfacts.products.get_by_category(category) To get all products for given category without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_category(category): print (product['product_name']) Get all products for given country. products = openfoodfacts.products.get_by_country(country) To get all products for given country without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_country(country): print (product['product_name']) Get all products for given entry date. products = openfoodfacts.products.get_by_entry_date(entry_date) To get all products for given entry date without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_entry_date(entry_date): print (product['product_name']) Get all products for given ingredient. products = openfoodfacts.products.get_by_ingredient(ingredient) To get all products for given ingredient without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_ingredient(ingredient): print (product['product_name']) Get all products for given language. products = openfoodfacts.products.get_by_language(language) To get all products for given language without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_language(language): print (product['product_name']) Get all products for given packaging. products = openfoodfacts.products.get_by_packaging(packaging) To get all products for given packaging without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_packaging(packaging): print (product['product_name']) Get all products for given packaging code. products = openfoodfacts.products.get_by_packaging_code(code) To get all products for given packaging code without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_packaging_code(packaging_code): print (product['product_name']) Get all products for given purchase place. products = openfoodfacts.products.get_by_purchase_place(place) To get all products for given purchase place without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_purchase_place(purchase_place): print (product['product_name']) Get all products for given store. products = openfoodfacts.products.get_by_store(store) To get all products for given store without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_store(store): print (product['product_name']) Get all products for given trace type. products = openfoodfacts.products.get_by_trace(trace) To get all products for given trace type without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_trace_type(trace_type): print (product['product_name']) Get all products for given state. products = openfoodfacts.products.get_by_state(state) To get all products for given state without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_state(state): print (product['product_name']) Product Get a given product. product = openfoodfacts.products.get_product(barcode) Open Food Facts data exports openfoodfacts.utils.download_data(file_type) Add a new product. status_code = openfoodfacts.products.add_new_product({ 'code': barcode, 'user_id' : myUsername, 'password' : myPassword, 'product_name' : myProduct, 'stores' : store, 'brands': brand, 'packaging': packaging }) Upload an image. status_code = openfoodfacts.products.upload_image(barcode, imagefield, img_path) Search Basic Search search_result = openfoodfacts.products.search(query) To get all products without pagination (returns a generator): for product in openfoodfacts.products.search_all(query): print (product['product_name']) Advanced Search Can pass in any parameters . search_result = openfoodfacts.products.advanced_search({ \"search_terms\":\"coke\", \"tagtype_0\":\"packaging\", \"tag_contains_0\":\"contains\", \"tag_0\":\"plastic\", \"nutriment_0\":\"energy\", \"nutriment_compare_0\":\"gt\", \"nutriment_value_0\":\"0\", \"sort_by\":\"unique_scans\", \"page_size\":\"20\" }) Open Beauty Facts Get a given product. product = openfoodfacts.beauty_products.get_product(barcode) Get all products for given facets. Page access (pagination) is available through parameters. products = openfoodfacts.beauty_products.get_by_facets({ 'packaging': 'Plastique', 'country': 'france' }) To get all products for given facets without pagination (returns a generator): for product in openfoodfacts.beauty_products.get_all_by_facets({ 'packaging': 'Plastique', 'country': 'france' }): print (product['product_name']) Basic Search search_result = openfoodfacts.beauty_products.products.search(query) To get all products without pagination (returns a generator): for product in openfoodfacts.beauty_products.products.search(query): print (product['product_name']) Open Pet Food Facts Get a given product. product = openfoodfacts.pet_products.get_product(barcode) Get all products for given facets. Page access (pagination) is available through parameters. products = openfoodfacts.pet_products.get_by_facets({ 'brand': 'Sans marque', 'country': 'france' }) To get all products for given facets without pagination (returns a generator): for product in openfoodfacts.pet_products.get_all_by_facets({ 'brand': 'Sans marque', 'country': 'france' }): print (product['product_name']) Basic Search search_result = openfoodfacts.pet_products.search(query) To get all products without pagination (returns a generator): for product in openfoodfacts.pet_products.search_all(query): print (product['product_name'])","title":"Usage"},{"location":"Usage/#usage-guide","text":"This guide provides information on the methods available within the Open Food Facts Python SDK. All the I/O is JSON . Open Food Facts Login Facets Products by Facet Product Search Open Beauty Facts Open Pet Food Facts","title":"Usage Guide"},{"location":"Usage/#open-food-facts","text":"","title":"Open Food Facts"},{"location":"Usage/#login","text":"Login into Openfoodfacts login_session_object = openfoodfacts.utils.login_into_OFF()","title":"Login"},{"location":"Usage/#facets","text":"Get all available additives. additives = openfoodfacts.facets.get_additives() Get all available allergens. allergens = openfoodfacts.facets.get_allergens() Get all available brands. brands = openfoodfacts.facets.get_brands() Get all available categories. categories = openfoodfacts.facets.get_categories() Get all available countries. countries = openfoodfacts.facets.get_countries() Get all available entry dates. entry_dates = openfoodfacts.facets.get_entry_dates() Get all available ingredients. ingredients = openfoodfacts.facets.get_ingredients() Get all available languages. languages = openfoodfacts.facets.get_languages() Get all available packagings. packagings = openfoodfacts.facets.get_packaging() Get all available packaging codes. codes = openfoodfacts.facets.get_packaging_codes() Get all available purchase places. places = openfoodfacts.facets.get_purchase_places() Get all available stores. stores = openfoodfacts.facets.get_stores() Get all available trace types. traces = openfoodfacts.facets.get_traces() Get all available states. states = openfoodfacts.facets.get_states() Filter with parameters You can also use parameters parameter to filter results emb_packaging_codes = openfoodfacts.facets.get_packaging_codes( parameters={'filter': 'emb'} )","title":"Facets"},{"location":"Usage/#products-by-facet","text":"Get all products for given facets. Page access (pagination) is available through parameters. products = openfoodfacts.products.get_by_facets({ 'trace': 'egg', 'country': 'france' }) To get all products for given facets without pagination (returns a generator): for product in openfoodfacts.products.get_by_facets({ 'trace': 'egg', 'country': 'france' }): print (product['product_name']) Get all products for given additive. products = openfoodfacts.products.get_by_additive(additive, page=1) To get all products for given additive without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_additive(additive): print (product['product_name']) Get all products for given allergen. products = openfoodfacts.products.get_by_allergen(allergen) To get all products for given allergen without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_allergen(allergen): print (product['product_name']) Get all products for given brand. products = openfoodfacts.products.get_by_brand(brand) To get all products for given brand without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_brand(brand): print (product['product_name']) Get all products for given category. products = openfoodfacts.products.get_by_category(category) To get all products for given category without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_category(category): print (product['product_name']) Get all products for given country. products = openfoodfacts.products.get_by_country(country) To get all products for given country without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_country(country): print (product['product_name']) Get all products for given entry date. products = openfoodfacts.products.get_by_entry_date(entry_date) To get all products for given entry date without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_entry_date(entry_date): print (product['product_name']) Get all products for given ingredient. products = openfoodfacts.products.get_by_ingredient(ingredient) To get all products for given ingredient without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_ingredient(ingredient): print (product['product_name']) Get all products for given language. products = openfoodfacts.products.get_by_language(language) To get all products for given language without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_language(language): print (product['product_name']) Get all products for given packaging. products = openfoodfacts.products.get_by_packaging(packaging) To get all products for given packaging without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_packaging(packaging): print (product['product_name']) Get all products for given packaging code. products = openfoodfacts.products.get_by_packaging_code(code) To get all products for given packaging code without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_packaging_code(packaging_code): print (product['product_name']) Get all products for given purchase place. products = openfoodfacts.products.get_by_purchase_place(place) To get all products for given purchase place without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_purchase_place(purchase_place): print (product['product_name']) Get all products for given store. products = openfoodfacts.products.get_by_store(store) To get all products for given store without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_store(store): print (product['product_name']) Get all products for given trace type. products = openfoodfacts.products.get_by_trace(trace) To get all products for given trace type without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_trace_type(trace_type): print (product['product_name']) Get all products for given state. products = openfoodfacts.products.get_by_state(state) To get all products for given state without pagination (returns a generator): for product in openfoodfacts.products.get_all_by_state(state): print (product['product_name'])","title":"Products by Facet"},{"location":"Usage/#product","text":"Get a given product. product = openfoodfacts.products.get_product(barcode) Open Food Facts data exports openfoodfacts.utils.download_data(file_type) Add a new product. status_code = openfoodfacts.products.add_new_product({ 'code': barcode, 'user_id' : myUsername, 'password' : myPassword, 'product_name' : myProduct, 'stores' : store, 'brands': brand, 'packaging': packaging }) Upload an image. status_code = openfoodfacts.products.upload_image(barcode, imagefield, img_path)","title":"Product"},{"location":"Usage/#search","text":"Basic Search search_result = openfoodfacts.products.search(query) To get all products without pagination (returns a generator): for product in openfoodfacts.products.search_all(query): print (product['product_name']) Advanced Search Can pass in any parameters . search_result = openfoodfacts.products.advanced_search({ \"search_terms\":\"coke\", \"tagtype_0\":\"packaging\", \"tag_contains_0\":\"contains\", \"tag_0\":\"plastic\", \"nutriment_0\":\"energy\", \"nutriment_compare_0\":\"gt\", \"nutriment_value_0\":\"0\", \"sort_by\":\"unique_scans\", \"page_size\":\"20\" })","title":"Search"},{"location":"Usage/#open-beauty-facts","text":"Get a given product. product = openfoodfacts.beauty_products.get_product(barcode) Get all products for given facets. Page access (pagination) is available through parameters. products = openfoodfacts.beauty_products.get_by_facets({ 'packaging': 'Plastique', 'country': 'france' }) To get all products for given facets without pagination (returns a generator): for product in openfoodfacts.beauty_products.get_all_by_facets({ 'packaging': 'Plastique', 'country': 'france' }): print (product['product_name']) Basic Search search_result = openfoodfacts.beauty_products.products.search(query) To get all products without pagination (returns a generator): for product in openfoodfacts.beauty_products.products.search(query): print (product['product_name'])","title":"Open Beauty Facts"},{"location":"Usage/#open-pet-food-facts","text":"Get a given product. product = openfoodfacts.pet_products.get_product(barcode) Get all products for given facets. Page access (pagination) is available through parameters. products = openfoodfacts.pet_products.get_by_facets({ 'brand': 'Sans marque', 'country': 'france' }) To get all products for given facets without pagination (returns a generator): for product in openfoodfacts.pet_products.get_all_by_facets({ 'brand': 'Sans marque', 'country': 'france' }): print (product['product_name']) Basic Search search_result = openfoodfacts.pet_products.search(query) To get all products without pagination (returns a generator): for product in openfoodfacts.pet_products.search_all(query): print (product['product_name'])","title":"Open Pet Food Facts"}]}